
project_wifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000b5c  00000bf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000047  0080012a  0080012a  00000c1a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001242  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093f  00000000  00000000  00001f26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000078e  00000000  00000000  00002865  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00002ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e4  00000000  00000000  0000310c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000640  00000000  00000000  000035f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00003c30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	9d c2       	rjmp	.+1338   	; 0x53c <__ctors_end>
   2:	00 00       	nop
   4:	b8 c2       	rjmp	.+1392   	; 0x576 <__bad_interrupt>
   6:	00 00       	nop
   8:	b6 c2       	rjmp	.+1388   	; 0x576 <__bad_interrupt>
   a:	00 00       	nop
   c:	b4 c2       	rjmp	.+1384   	; 0x576 <__bad_interrupt>
   e:	00 00       	nop
  10:	b2 c2       	rjmp	.+1380   	; 0x576 <__bad_interrupt>
  12:	00 00       	nop
  14:	b0 c2       	rjmp	.+1376   	; 0x576 <__bad_interrupt>
  16:	00 00       	nop
  18:	ae c2       	rjmp	.+1372   	; 0x576 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ac c2       	rjmp	.+1368   	; 0x576 <__bad_interrupt>
  1e:	00 00       	nop
  20:	aa c2       	rjmp	.+1364   	; 0x576 <__bad_interrupt>
  22:	00 00       	nop
  24:	a8 c2       	rjmp	.+1360   	; 0x576 <__bad_interrupt>
  26:	00 00       	nop
  28:	a6 c2       	rjmp	.+1356   	; 0x576 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a4 c2       	rjmp	.+1352   	; 0x576 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a2 c2       	rjmp	.+1348   	; 0x576 <__bad_interrupt>
  32:	00 00       	nop
  34:	a0 c2       	rjmp	.+1344   	; 0x576 <__bad_interrupt>
  36:	00 00       	nop
  38:	9e c2       	rjmp	.+1340   	; 0x576 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9c c2       	rjmp	.+1336   	; 0x576 <__bad_interrupt>
  3e:	00 00       	nop
  40:	9a c2       	rjmp	.+1332   	; 0x576 <__bad_interrupt>
  42:	00 00       	nop
  44:	98 c2       	rjmp	.+1328   	; 0x576 <__bad_interrupt>
  46:	00 00       	nop
  48:	e3 c2       	rjmp	.+1478   	; 0x610 <__vector_18>
  4a:	00 00       	nop
  4c:	94 c2       	rjmp	.+1320   	; 0x576 <__bad_interrupt>
  4e:	00 00       	nop
  50:	92 c2       	rjmp	.+1316   	; 0x576 <__bad_interrupt>
  52:	00 00       	nop
  54:	90 c2       	rjmp	.+1312   	; 0x576 <__bad_interrupt>
  56:	00 00       	nop
  58:	8e c2       	rjmp	.+1308   	; 0x576 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8c c2       	rjmp	.+1304   	; 0x576 <__bad_interrupt>
  5e:	00 00       	nop
  60:	8a c2       	rjmp	.+1300   	; 0x576 <__bad_interrupt>
  62:	00 00       	nop
  64:	88 c2       	rjmp	.+1296   	; 0x576 <__bad_interrupt>
  66:	00 00       	nop
  68:	86 c2       	rjmp	.+1292   	; 0x576 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	84 c2       	rjmp	.+1288   	; 0x576 <__bad_interrupt>
  6e:	00 00       	nop
  70:	82 c2       	rjmp	.+1284   	; 0x576 <__bad_interrupt>
  72:	00 00       	nop
  74:	80 c2       	rjmp	.+1280   	; 0x576 <__bad_interrupt>
  76:	00 00       	nop
  78:	7e c2       	rjmp	.+1276   	; 0x576 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7c c2       	rjmp	.+1272   	; 0x576 <__bad_interrupt>
  7e:	00 00       	nop
  80:	7a c2       	rjmp	.+1268   	; 0x576 <__bad_interrupt>
  82:	00 00       	nop
  84:	78 c2       	rjmp	.+1264   	; 0x576 <__bad_interrupt>
  86:	00 00       	nop
  88:	76 c2       	rjmp	.+1260   	; 0x576 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
  8c:	41 54       	subi	r20, 0x41	; 65
  8e:	0d 0a       	sbc	r0, r29
	...
  f0:	41 54       	subi	r20, 0x41	; 65
  f2:	2b 52       	subi	r18, 0x2B	; 43
  f4:	53 54       	subi	r21, 0x43	; 67
  f6:	0d 0a       	sbc	r0, r29
	...
 154:	41 54       	subi	r20, 0x41	; 65
 156:	2b 47       	sbci	r18, 0x7B	; 123
 158:	4d 52       	subi	r20, 0x2D	; 45
 15a:	0d 0a       	sbc	r0, r29
	...
 1b8:	41 54       	subi	r20, 0x41	; 65
 1ba:	2b 43       	sbci	r18, 0x3B	; 59
 1bc:	57 4d       	sbci	r21, 0xD7	; 215
 1be:	4f 44       	sbci	r20, 0x4F	; 79
 1c0:	45 3d       	cpi	r20, 0xD5	; 213
 1c2:	31 0d       	add	r19, r1
 1c4:	0a 00       	.word	0x000a	; ????
	...
 21a:	00 00       	nop
 21c:	41 54       	subi	r20, 0x41	; 65
 21e:	2b 43       	sbci	r18, 0x3B	; 59
 220:	49 50       	subi	r20, 0x09	; 9
 222:	4d 55       	subi	r20, 0x5D	; 93
 224:	58 3d       	cpi	r21, 0xD8	; 216
 226:	30 0d       	add	r19, r0
 228:	0a 00       	.word	0x000a	; ????
	...
 27e:	00 00       	nop
 280:	41 54       	subi	r20, 0x41	; 65
 282:	2b 43       	sbci	r18, 0x3B	; 59
 284:	49 50       	subi	r20, 0x09	; 9
 286:	53 45       	sbci	r21, 0x53	; 83
 288:	52 56       	subi	r21, 0x62	; 98
 28a:	45 52       	subi	r20, 0x25	; 37
 28c:	3d 31       	cpi	r19, 0x1D	; 29
 28e:	2c 31       	cpi	r18, 0x1C	; 28
 290:	31 31       	cpi	r19, 0x11	; 17
 292:	31 0d       	add	r19, r1
 294:	0a 00       	.word	0x000a	; ????
	...
 2e2:	00 00       	nop
 2e4:	41 54       	subi	r20, 0x41	; 65
 2e6:	2b 43       	sbci	r18, 0x3B	; 59
 2e8:	57 53       	subi	r21, 0x37	; 55
 2ea:	41 50       	subi	r20, 0x01	; 1
 2ec:	3d 22       	and	r3, r29
 2ee:	54 45       	sbci	r21, 0x54	; 84
 2f0:	53 54       	subi	r21, 0x43	; 67
 2f2:	5f 56       	subi	r21, 0x6F	; 111
 2f4:	31 2e       	mov	r3, r17
 2f6:	35 22       	and	r3, r21
 2f8:	2c 22       	and	r2, r28
 2fa:	30 30       	cpi	r19, 0x00	; 0
 2fc:	30 30       	cpi	r19, 0x00	; 0
 2fe:	22 2c       	mov	r2, r2
 300:	33 2c       	mov	r3, r3
 302:	30 0d       	add	r19, r0
 304:	0a 00       	.word	0x000a	; ????
	...
 346:	00 00       	nop
 348:	41 54       	subi	r20, 0x41	; 65
 34a:	2b 43       	sbci	r18, 0x3B	; 59
 34c:	57 4a       	sbci	r21, 0xA7	; 167
 34e:	41 50       	subi	r20, 0x01	; 1
 350:	3d 22       	and	r3, r29
 352:	69 6f       	ori	r22, 0xF9	; 249
 354:	74 36       	cpi	r23, 0x64	; 100
 356:	22 2c       	mov	r2, r2
 358:	22 69       	ori	r18, 0x92	; 146
 35a:	6f 74       	andi	r22, 0x4F	; 79
 35c:	36 30       	cpi	r19, 0x06	; 6
 35e:	30 30       	cpi	r19, 0x00	; 0
 360:	30 22       	and	r3, r16
 362:	0d 0a       	sbc	r0, r29
	...
 3ac:	41 54       	subi	r20, 0x41	; 65
 3ae:	2b 43       	sbci	r18, 0x3B	; 59
 3b0:	49 46       	sbci	r20, 0x69	; 105
 3b2:	53 52       	subi	r21, 0x23	; 35
 3b4:	0d 0a       	sbc	r0, r29
	...
 40e:	00 00       	nop
 410:	41 54       	subi	r20, 0x41	; 65
 412:	2b 43       	sbci	r18, 0x3B	; 59
 414:	49 50       	subi	r20, 0x09	; 9
 416:	53 54       	subi	r21, 0x43	; 67
 418:	41 52       	subi	r20, 0x21	; 33
 41a:	54 3d       	cpi	r21, 0xD4	; 212
 41c:	22 54       	subi	r18, 0x42	; 66
 41e:	43 50       	subi	r20, 0x03	; 3
 420:	22 2c       	mov	r2, r2
 422:	22 63       	ori	r18, 0x32	; 50
 424:	6c 6f       	ori	r22, 0xFC	; 252
 426:	75 64       	ori	r23, 0x45	; 69
 428:	2e 70       	andi	r18, 0x0E	; 14
 42a:	61 72       	andi	r22, 0x21	; 33
 42c:	6b 2d       	mov	r22, r11
 42e:	63 6c       	ori	r22, 0xC3	; 195
 430:	6f 75       	andi	r22, 0x5F	; 95
 432:	64 2e       	mov	r6, r20
 434:	63 6f       	ori	r22, 0xF3	; 243
 436:	31 39       	cpi	r19, 0x91	; 145
 438:	2e 6b       	ori	r18, 0xBE	; 190
 43a:	72 22       	and	r7, r18
 43c:	2c 38       	cpi	r18, 0x8C	; 140
 43e:	30 0d       	add	r19, r0
 440:	0a 00       	.word	0x000a	; ????
	...
 472:	00 00       	nop
 474:	41 54       	subi	r20, 0x41	; 65
 476:	2b 43       	sbci	r18, 0x3B	; 59
 478:	49 50       	subi	r20, 0x09	; 9
 47a:	53 45       	sbci	r21, 0x53	; 83
 47c:	4e 44       	sbci	r20, 0x4E	; 78
 47e:	3d 36       	cpi	r19, 0x6D	; 109
 480:	37 0d       	add	r19, r7
 482:	0a 00       	.word	0x000a	; ????
	...
 4d8:	47 45       	sbci	r20, 0x57	; 87
 4da:	54 20       	and	r5, r4
 4dc:	2f 70       	andi	r18, 0x0F	; 15
 4de:	72 6f       	ori	r23, 0xF2	; 242
 4e0:	6a 65       	ori	r22, 0x5A	; 90
 4e2:	63 74       	andi	r22, 0x43	; 67
 4e4:	2f 76       	andi	r18, 0x6F	; 111
 4e6:	69 65       	ori	r22, 0x59	; 89
 4e8:	77 32       	cpi	r23, 0x27	; 39
 4ea:	2e 70       	andi	r18, 0x0E	; 14
 4ec:	68 70       	andi	r22, 0x08	; 8
 4ee:	20 48       	sbci	r18, 0x80	; 128
 4f0:	54 54       	subi	r21, 0x44	; 68
 4f2:	50 2f       	mov	r21, r16
 4f4:	31 2e       	mov	r3, r17
 4f6:	30 0d       	add	r19, r0
 4f8:	0a 48       	sbci	r16, 0x8A	; 138
 4fa:	6f 73       	andi	r22, 0x3F	; 63
 4fc:	74 3a       	cpi	r23, 0xA4	; 164
 4fe:	20 63       	ori	r18, 0x30	; 48
 500:	6c 6f       	ori	r22, 0xFC	; 252
 502:	75 64       	ori	r23, 0x45	; 69
 504:	2e 70       	andi	r18, 0x0E	; 14
 506:	61 72       	andi	r22, 0x21	; 33
 508:	6b 2d       	mov	r22, r11
 50a:	63 6c       	ori	r22, 0xC3	; 195
 50c:	6f 75       	andi	r22, 0x5F	; 95
 50e:	64 2e       	mov	r6, r20
 510:	63 6f       	ori	r22, 0xF3	; 243
 512:	31 39       	cpi	r19, 0x91	; 145
 514:	2e 6b       	ori	r18, 0xBE	; 190
 516:	72 0d       	add	r23, r2
 518:	0a 0d       	add	r16, r10
 51a:	0a 00       	.word	0x000a	; ????
	...

0000053c <__ctors_end>:
 53c:	11 24       	eor	r1, r1
 53e:	1f be       	out	0x3f, r1	; 63
 540:	cf ef       	ldi	r28, 0xFF	; 255
 542:	d0 e1       	ldi	r29, 0x10	; 16
 544:	de bf       	out	0x3e, r29	; 62
 546:	cd bf       	out	0x3d, r28	; 61

00000548 <__do_copy_data>:
 548:	11 e0       	ldi	r17, 0x01	; 1
 54a:	a0 e0       	ldi	r26, 0x00	; 0
 54c:	b1 e0       	ldi	r27, 0x01	; 1
 54e:	ec e5       	ldi	r30, 0x5C	; 92
 550:	fb e0       	ldi	r31, 0x0B	; 11
 552:	00 e0       	ldi	r16, 0x00	; 0
 554:	0b bf       	out	0x3b, r16	; 59
 556:	02 c0       	rjmp	.+4      	; 0x55c <__do_copy_data+0x14>
 558:	07 90       	elpm	r0, Z+
 55a:	0d 92       	st	X+, r0
 55c:	aa 32       	cpi	r26, 0x2A	; 42
 55e:	b1 07       	cpc	r27, r17
 560:	d9 f7       	brne	.-10     	; 0x558 <__do_copy_data+0x10>

00000562 <__do_clear_bss>:
 562:	21 e0       	ldi	r18, 0x01	; 1
 564:	aa e2       	ldi	r26, 0x2A	; 42
 566:	b1 e0       	ldi	r27, 0x01	; 1
 568:	01 c0       	rjmp	.+2      	; 0x56c <.do_clear_bss_start>

0000056a <.do_clear_bss_loop>:
 56a:	1d 92       	st	X+, r1

0000056c <.do_clear_bss_start>:
 56c:	a1 37       	cpi	r26, 0x71	; 113
 56e:	b2 07       	cpc	r27, r18
 570:	e1 f7       	brne	.-8      	; 0x56a <.do_clear_bss_loop>
 572:	ca d1       	rcall	.+916    	; 0x908 <main>
 574:	f1 c2       	rjmp	.+1506   	; 0xb58 <_exit>

00000576 <__bad_interrupt>:
 576:	44 cd       	rjmp	.-1400   	; 0x0 <__vectors>

00000578 <TX0_CHAR>:
volatile unsigned char rx_cnt=0,rx_buf[15],temp_buf[15],hum_buf[15],pm_buf[15];
volatile char AT_C=0;

int wait_flag = 0, dot_count=0,get_count = 0,f_count= 0;
//
void TX0_CHAR(char ch){ while(!(UCSR0A&0x20)); UDR0=ch; }
 578:	5d 9b       	sbis	0x0b, 5	; 11
 57a:	fe cf       	rjmp	.-4      	; 0x578 <TX0_CHAR>
 57c:	8c b9       	out	0x0c, r24	; 12
 57e:	08 95       	ret

00000580 <TX0_STR>:
void TX0_STR(char *s){ while(*s) TX0_CHAR(*s++); }
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	ec 01       	movw	r28, r24
 586:	02 c0       	rjmp	.+4      	; 0x58c <TX0_STR+0xc>
 588:	21 96       	adiw	r28, 0x01	; 1
 58a:	f6 df       	rcall	.-20     	; 0x578 <TX0_CHAR>
 58c:	88 81       	ld	r24, Y
 58e:	81 11       	cpse	r24, r1
 590:	fb cf       	rjmp	.-10     	; 0x588 <TX0_STR+0x8>
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	08 95       	ret

00000598 <TXDATA>:
	//"GET /update?api_key=%s&field%d=%u\r\n"
	"GET /project/view2.php HTTP/1.0\r\nHost: cloud.park-cloud.co19.kr\r\n\r\n",
 };
 
 void TXDATA(const char SEND_AT[])
 {
 598:	cf 93       	push	r28
 59a:	df 93       	push	r29
 59c:	cd b7       	in	r28, 0x3d	; 61
 59e:	de b7       	in	r29, 0x3e	; 62
 5a0:	c4 56       	subi	r28, 0x64	; 100
 5a2:	d1 09       	sbc	r29, r1
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	f8 94       	cli
 5a8:	de bf       	out	0x3e, r29	; 62
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	cd bf       	out	0x3d, r28	; 61
	 char str1[100];
	 strcpy_P(str1, SEND_AT);
 5ae:	bc 01       	movw	r22, r24
 5b0:	ce 01       	movw	r24, r28
 5b2:	01 96       	adiw	r24, 0x01	; 1
 5b4:	97 d2       	rcall	.+1326   	; 0xae4 <strcpy_P>
	 TX0_STR(str1);
 5b6:	ce 01       	movw	r24, r28
 5b8:	01 96       	adiw	r24, 0x01	; 1
 5ba:	e2 df       	rcall	.-60     	; 0x580 <TX0_STR>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5bc:	8f e3       	ldi	r24, 0x3F	; 63
 5be:	9c e9       	ldi	r25, 0x9C	; 156
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <TXDATA+0x28>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <TXDATA+0x2e>
 5c6:	00 00       	nop
	 _delay_ms(10);
 }
 5c8:	cc 59       	subi	r28, 0x9C	; 156
 5ca:	df 4f       	sbci	r29, 0xFF	; 255
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	f8 94       	cli
 5d0:	de bf       	out	0x3e, r29	; 62
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	cd bf       	out	0x3d, r28	; 61
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	08 95       	ret

000005dc <UART1_tX>:
				
			}

void UART1_tX(char data){
	//if you want send data
	while(!(UCSR1A & (1<<UDRE1)));//empty_status
 5dc:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 5e0:	95 ff       	sbrs	r25, 5
 5e2:	fc cf       	rjmp	.-8      	; 0x5dc <UART1_tX>
	UDR1 = data;
 5e4:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 5e8:	08 95       	ret

000005ea <TX1_CHAR>:
}
void TX1_CHAR(char ch){ while(!(UCSR1A&0x20)); UDR1=ch; }
 5ea:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 5ee:	95 ff       	sbrs	r25, 5
 5f0:	fc cf       	rjmp	.-8      	; 0x5ea <TX1_CHAR>
 5f2:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 5f6:	08 95       	ret

000005f8 <TX1_STR>:
void TX1_STR(char *s){ while(*s) TX1_CHAR(*s++); }
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
 5fc:	ec 01       	movw	r28, r24
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <TX1_STR+0xc>
 600:	21 96       	adiw	r28, 0x01	; 1
 602:	f3 df       	rcall	.-26     	; 0x5ea <TX1_CHAR>
 604:	88 81       	ld	r24, Y
 606:	81 11       	cpse	r24, r1
 608:	fb cf       	rjmp	.-10     	; 0x600 <TX1_STR+0x8>
 60a:	df 91       	pop	r29
 60c:	cf 91       	pop	r28
 60e:	08 95       	ret

00000610 <__vector_18>:
	 TX0_STR(str1);
	 _delay_ms(10);
 }
 
 
 ISR(USART0_RX_vect){ // get respon data!!!
 610:	1f 92       	push	r1
 612:	0f 92       	push	r0
 614:	0f b6       	in	r0, 0x3f	; 63
 616:	0f 92       	push	r0
 618:	11 24       	eor	r1, r1
 61a:	0b b6       	in	r0, 0x3b	; 59
 61c:	0f 92       	push	r0
 61e:	0f 93       	push	r16
 620:	1f 93       	push	r17
 622:	2f 93       	push	r18
 624:	3f 93       	push	r19
 626:	4f 93       	push	r20
 628:	5f 93       	push	r21
 62a:	6f 93       	push	r22
 62c:	7f 93       	push	r23
 62e:	8f 93       	push	r24
 630:	9f 93       	push	r25
 632:	af 93       	push	r26
 634:	bf 93       	push	r27
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	ef 93       	push	r30
 63c:	ff 93       	push	r31
	 char rx;//one letter
	 rx=UDR0;
 63e:	cc b1       	in	r28, 0x0c	; 12
	 if(rx=='\n'){ //'\n'=0x0A
 640:	ca 30       	cpi	r28, 0x0A	; 10
 642:	79 f5       	brne	.+94     	; 0x6a2 <__vector_18+0x92>
		 rx_buf[rx_cnt]='\0';
 644:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <rx_cnt>
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	ed 5a       	subi	r30, 0xAD	; 173
 64c:	fe 4f       	sbci	r31, 0xFE	; 254
 64e:	10 82       	st	Z, r1
		 if(strcmp(rx_buf, "OK\r") == 0){//if get respone data ok...
 650:	60 e0       	ldi	r22, 0x00	; 0
 652:	71 e0       	ldi	r23, 0x01	; 1
 654:	83 e5       	ldi	r24, 0x53	; 83
 656:	91 e0       	ldi	r25, 0x01	; 1
 658:	4f d2       	rcall	.+1182   	; 0xaf8 <strcmp>
 65a:	89 2b       	or	r24, r25
 65c:	29 f4       	brne	.+10     	; 0x668 <__vector_18+0x58>
			 wait_flag = 0;
 65e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <wait_flag+0x1>
 662:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <wait_flag>
			 PORTA = 0x00;
 666:	1b ba       	out	0x1b, r1	; 27
		 }
		 if(strcmp(rx_buf, "IP\r") == 0){//if get respone data ok...
 668:	64 e0       	ldi	r22, 0x04	; 4
 66a:	71 e0       	ldi	r23, 0x01	; 1
 66c:	83 e5       	ldi	r24, 0x53	; 83
 66e:	91 e0       	ldi	r25, 0x01	; 1
 670:	43 d2       	rcall	.+1158   	; 0xaf8 <strcmp>
 672:	89 2b       	or	r24, r25
 674:	31 f4       	brne	.+12     	; 0x682 <__vector_18+0x72>
			 wait_flag = 0;
 676:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <wait_flag+0x1>
 67a:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <wait_flag>
			 PORTA = 0x0F;
 67e:	8f e0       	ldi	r24, 0x0F	; 15
 680:	8b bb       	out	0x1b, r24	; 27
			 }
			 if(strcmp(rx_buf, "CLOSED\r") == 0){//if get respone html page data				 
 682:	68 e0       	ldi	r22, 0x08	; 8
 684:	71 e0       	ldi	r23, 0x01	; 1
 686:	83 e5       	ldi	r24, 0x53	; 83
 688:	91 e0       	ldi	r25, 0x01	; 1
 68a:	36 d2       	rcall	.+1132   	; 0xaf8 <strcmp>
 68c:	89 2b       	or	r24, r25
 68e:	31 f4       	brne	.+12     	; 0x69c <__vector_18+0x8c>
				 wait_flag = 0;
 690:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <wait_flag+0x1>
 694:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <wait_flag>
				 PORTA = 0x0F;				 
 698:	8f e0       	ldi	r24, 0x0F	; 15
 69a:	8b bb       	out	0x1b, r24	; 27
			 }			 
			 rx_cnt=0;
 69c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <rx_cnt>
 6a0:	0e c0       	rjmp	.+28     	; 0x6be <__vector_18+0xae>
			 }
			 else{
				 if(rx_cnt<9)rx_buf[rx_cnt++]=rx;
 6a2:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <rx_cnt>
 6a6:	89 30       	cpi	r24, 0x09	; 9
 6a8:	50 f4       	brcc	.+20     	; 0x6be <__vector_18+0xae>
 6aa:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <rx_cnt>
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	8e 0f       	add	r24, r30
 6b2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <rx_cnt>
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	ed 5a       	subi	r30, 0xAD	; 173
 6ba:	fe 4f       	sbci	r31, 0xFE	; 254
 6bc:	c0 83       	st	Z, r28
				 }
			if(rx == ','){
 6be:	cc 32       	cpi	r28, 0x2C	; 44
 6c0:	69 f4       	brne	.+26     	; 0x6dc <__vector_18+0xcc>
				dot_count++;
 6c2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <dot_count>
 6c6:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <dot_count+0x1>
 6ca:	01 96       	adiw	r24, 0x01	; 1
 6cc:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <dot_count+0x1>
 6d0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <dot_count>
				get_count = 0; //init
 6d4:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <get_count+0x1>
 6d8:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <get_count>
			}if(2<dot_count && dot_count<7){
 6dc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <dot_count>
 6e0:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <dot_count+0x1>
 6e4:	9c 01       	movw	r18, r24
 6e6:	23 50       	subi	r18, 0x03	; 3
 6e8:	31 09       	sbc	r19, r1
 6ea:	24 30       	cpi	r18, 0x04	; 4
 6ec:	31 05       	cpc	r19, r1
 6ee:	08 f0       	brcs	.+2      	; 0x6f2 <__vector_18+0xe2>
 6f0:	f4 c0       	rjmp	.+488    	; 0x8da <__vector_18+0x2ca>
				if(dot_count == 3 && get_count <15){
 6f2:	83 30       	cpi	r24, 0x03	; 3
 6f4:	91 05       	cpc	r25, r1
 6f6:	89 f4       	brne	.+34     	; 0x71a <__vector_18+0x10a>
 6f8:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <get_count>
 6fc:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <get_count+0x1>
 700:	2f 30       	cpi	r18, 0x0F	; 15
 702:	31 05       	cpc	r19, r1
 704:	54 f4       	brge	.+20     	; 0x71a <__vector_18+0x10a>
					temp_buf[get_count] = rx;
 706:	f9 01       	movw	r30, r18
 708:	ee 59       	subi	r30, 0x9E	; 158
 70a:	fe 4f       	sbci	r31, 0xFE	; 254
 70c:	c0 83       	st	Z, r28
					get_count++;
 70e:	2f 5f       	subi	r18, 0xFF	; 255
 710:	3f 4f       	sbci	r19, 0xFF	; 255
 712:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <get_count+0x1>
 716:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <get_count>
				}
				if(dot_count == 4&& get_count <15){
 71a:	84 30       	cpi	r24, 0x04	; 4
 71c:	91 05       	cpc	r25, r1
 71e:	89 f4       	brne	.+34     	; 0x742 <__vector_18+0x132>
 720:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <get_count>
 724:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <get_count+0x1>
 728:	2f 30       	cpi	r18, 0x0F	; 15
 72a:	31 05       	cpc	r19, r1
 72c:	54 f4       	brge	.+20     	; 0x742 <__vector_18+0x132>
					hum_buf[get_count] = rx;
 72e:	f9 01       	movw	r30, r18
 730:	ec 5b       	subi	r30, 0xBC	; 188
 732:	fe 4f       	sbci	r31, 0xFE	; 254
 734:	c0 83       	st	Z, r28
					get_count++;
 736:	2f 5f       	subi	r18, 0xFF	; 255
 738:	3f 4f       	sbci	r19, 0xFF	; 255
 73a:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <get_count+0x1>
 73e:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <get_count>
				}if(dot_count == 5&& get_count <15){
 742:	85 30       	cpi	r24, 0x05	; 5
 744:	91 05       	cpc	r25, r1
 746:	89 f4       	brne	.+34     	; 0x76a <__vector_18+0x15a>
 748:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <get_count>
 74c:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <get_count+0x1>
 750:	2f 30       	cpi	r18, 0x0F	; 15
 752:	31 05       	cpc	r19, r1
 754:	54 f4       	brge	.+20     	; 0x76a <__vector_18+0x15a>
					pm_buf[get_count] = rx;
 756:	f9 01       	movw	r30, r18
 758:	eb 5c       	subi	r30, 0xCB	; 203
 75a:	fe 4f       	sbci	r31, 0xFE	; 254
 75c:	c0 83       	st	Z, r28
					get_count++;
 75e:	2f 5f       	subi	r18, 0xFF	; 255
 760:	3f 4f       	sbci	r19, 0xFF	; 255
 762:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <get_count+0x1>
 766:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <get_count>
				}if(dot_count == 6){
 76a:	06 97       	sbiw	r24, 0x06	; 6
 76c:	09 f0       	breq	.+2      	; 0x770 <__vector_18+0x160>
 76e:	b5 c0       	rjmp	.+362    	; 0x8da <__vector_18+0x2ca>
					dot_count=0;
 770:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <dot_count+0x1>
 774:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <dot_count>
					f_count = 0;
 778:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <f_count+0x1>
 77c:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <f_count>
					char *ptr = strtok(temp_buf,"\"");
 780:	60 e1       	ldi	r22, 0x10	; 16
 782:	71 e0       	ldi	r23, 0x01	; 1
 784:	82 e6       	ldi	r24, 0x62	; 98
 786:	91 e0       	ldi	r25, 0x01	; 1
 788:	b4 d1       	rcall	.+872    	; 0xaf2 <strtok>
 78a:	ec 01       	movw	r28, r24
					while(ptr != NULL){
 78c:	25 c0       	rjmp	.+74     	; 0x7d8 <__vector_18+0x1c8>
						f_count++;
 78e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <f_count>
 792:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <f_count+0x1>
 796:	01 96       	adiw	r24, 0x01	; 1
 798:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <f_count+0x1>
 79c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <f_count>
						//TX1_STR(ptr);
						ptr = strtok(NULL,"\"");
 7a0:	60 e1       	ldi	r22, 0x10	; 16
 7a2:	71 e0       	ldi	r23, 0x01	; 1
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	a4 d1       	rcall	.+840    	; 0xaf2 <strtok>
 7aa:	ec 01       	movw	r28, r24
						if(f_count == 3){
 7ac:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <f_count>
 7b0:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <f_count+0x1>
 7b4:	03 97       	sbiw	r24, 0x03	; 3
							//TX1_STR(ptr);
							TX1_STR("n0.val=");
 7b6:	81 f4       	brne	.+32     	; 0x7d8 <__vector_18+0x1c8>
 7b8:	82 e1       	ldi	r24, 0x12	; 18
 7ba:	91 e0       	ldi	r25, 0x01	; 1
 7bc:	1d df       	rcall	.-454    	; 0x5f8 <TX1_STR>
							TX1_STR(ptr);
 7be:	ce 01       	movw	r24, r28
 7c0:	1b df       	rcall	.-458    	; 0x5f8 <TX1_STR>
							for(int index = 0 ; index < 3; index++){
 7c2:	00 e0       	ldi	r16, 0x00	; 0
 7c4:	10 e0       	ldi	r17, 0x00	; 0
 7c6:	05 c0       	rjmp	.+10     	; 0x7d2 <__vector_18+0x1c2>
								UART1_tX(0xFF);
 7c8:	8f ef       	ldi	r24, 0xFF	; 255
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	07 df       	rcall	.-498    	; 0x5dc <UART1_tX>
 7ce:	0f 5f       	subi	r16, 0xFF	; 255
						ptr = strtok(NULL,"\"");
						if(f_count == 3){
							//TX1_STR(ptr);
							TX1_STR("n0.val=");
							TX1_STR(ptr);
							for(int index = 0 ; index < 3; index++){
 7d0:	1f 4f       	sbci	r17, 0xFF	; 255
 7d2:	03 30       	cpi	r16, 0x03	; 3
 7d4:	11 05       	cpc	r17, r1
 7d6:	c4 f3       	brlt	.-16     	; 0x7c8 <__vector_18+0x1b8>
 7d8:	cd 2b       	or	r28, r29
					get_count++;
				}if(dot_count == 6){
					dot_count=0;
					f_count = 0;
					char *ptr = strtok(temp_buf,"\"");
					while(ptr != NULL){
 7da:	c9 f6       	brne	.-78     	; 0x78e <__vector_18+0x17e>
 7dc:	2f ef       	ldi	r18, 0xFF	; 255
 7de:	81 ee       	ldi	r24, 0xE1	; 225
 7e0:	94 e0       	ldi	r25, 0x04	; 4
 7e2:	21 50       	subi	r18, 0x01	; 1
 7e4:	80 40       	sbci	r24, 0x00	; 0
 7e6:	90 40       	sbci	r25, 0x00	; 0
 7e8:	e1 f7       	brne	.-8      	; 0x7e2 <__vector_18+0x1d2>
 7ea:	00 c0       	rjmp	.+0      	; 0x7ec <__vector_18+0x1dc>
 7ec:	00 00       	nop
 7ee:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <f_count+0x1>
							}
						}
					}
					_delay_ms(100);
					
					f_count = 0;
 7f2:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <f_count>
					
					ptr = strtok(hum_buf,"\"");
 7f6:	60 e1       	ldi	r22, 0x10	; 16
 7f8:	71 e0       	ldi	r23, 0x01	; 1
 7fa:	84 e4       	ldi	r24, 0x44	; 68
 7fc:	91 e0       	ldi	r25, 0x01	; 1
 7fe:	79 d1       	rcall	.+754    	; 0xaf2 <strtok>
 800:	ec 01       	movw	r28, r24
 802:	25 c0       	rjmp	.+74     	; 0x84e <__vector_18+0x23e>
					while(ptr != NULL){
 804:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <f_count>
						f_count++;
 808:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <f_count+0x1>
 80c:	01 96       	adiw	r24, 0x01	; 1
 80e:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <f_count+0x1>
 812:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <f_count>
						//TX1_STR(ptr);
						ptr = strtok(NULL,"\"");
 816:	60 e1       	ldi	r22, 0x10	; 16
 818:	71 e0       	ldi	r23, 0x01	; 1
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	69 d1       	rcall	.+722    	; 0xaf2 <strtok>
 820:	ec 01       	movw	r28, r24
						if(f_count == 3){
 822:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <f_count>
 826:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <f_count+0x1>
 82a:	03 97       	sbiw	r24, 0x03	; 3
							//TX1_STR(ptr);
							TX1_STR("n1.val=");
 82c:	81 f4       	brne	.+32     	; 0x84e <__vector_18+0x23e>
 82e:	8a e1       	ldi	r24, 0x1A	; 26
 830:	91 e0       	ldi	r25, 0x01	; 1
							TX1_STR(ptr);
 832:	e2 de       	rcall	.-572    	; 0x5f8 <TX1_STR>
 834:	ce 01       	movw	r24, r28
 836:	e0 de       	rcall	.-576    	; 0x5f8 <TX1_STR>
							for(int index = 0 ; index < 3; index++){
 838:	00 e0       	ldi	r16, 0x00	; 0
 83a:	10 e0       	ldi	r17, 0x00	; 0
 83c:	05 c0       	rjmp	.+10     	; 0x848 <__vector_18+0x238>
								UART1_tX(0xFF);
 83e:	8f ef       	ldi	r24, 0xFF	; 255
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	cc de       	rcall	.-616    	; 0x5dc <UART1_tX>
 844:	0f 5f       	subi	r16, 0xFF	; 255
						ptr = strtok(NULL,"\"");
						if(f_count == 3){
							//TX1_STR(ptr);
							TX1_STR("n1.val=");
							TX1_STR(ptr);
							for(int index = 0 ; index < 3; index++){
 846:	1f 4f       	sbci	r17, 0xFF	; 255
 848:	03 30       	cpi	r16, 0x03	; 3
 84a:	11 05       	cpc	r17, r1
 84c:	c4 f3       	brlt	.-16     	; 0x83e <__vector_18+0x22e>
 84e:	cd 2b       	or	r28, r29
					_delay_ms(100);
					
					f_count = 0;
					
					ptr = strtok(hum_buf,"\"");
					while(ptr != NULL){
 850:	c9 f6       	brne	.-78     	; 0x804 <__vector_18+0x1f4>
 852:	2f ef       	ldi	r18, 0xFF	; 255
 854:	81 ee       	ldi	r24, 0xE1	; 225
 856:	94 e0       	ldi	r25, 0x04	; 4
 858:	21 50       	subi	r18, 0x01	; 1
 85a:	80 40       	sbci	r24, 0x00	; 0
 85c:	90 40       	sbci	r25, 0x00	; 0
 85e:	e1 f7       	brne	.-8      	; 0x858 <__vector_18+0x248>
 860:	00 c0       	rjmp	.+0      	; 0x862 <__vector_18+0x252>
 862:	00 00       	nop
					}
					_delay_ms(100);
					//TX1_STR(hum_buf);
					//_delay_ms(100);
					
					f_count = 0;
 864:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <f_count+0x1>
 868:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <f_count>
					ptr = strtok(pm_buf,"\"");
 86c:	60 e1       	ldi	r22, 0x10	; 16
 86e:	71 e0       	ldi	r23, 0x01	; 1
 870:	85 e3       	ldi	r24, 0x35	; 53
 872:	91 e0       	ldi	r25, 0x01	; 1
 874:	3e d1       	rcall	.+636    	; 0xaf2 <strtok>
 876:	ec 01       	movw	r28, r24
 878:	25 c0       	rjmp	.+74     	; 0x8c4 <__vector_18+0x2b4>
					while(ptr != NULL){
						f_count++;
 87a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <f_count>
 87e:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <f_count+0x1>
 882:	01 96       	adiw	r24, 0x01	; 1
 884:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <f_count+0x1>
 888:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <f_count>
						//TX1_STR(ptr);
						ptr = strtok(NULL,"\"");
 88c:	60 e1       	ldi	r22, 0x10	; 16
 88e:	71 e0       	ldi	r23, 0x01	; 1
 890:	80 e0       	ldi	r24, 0x00	; 0
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	2e d1       	rcall	.+604    	; 0xaf2 <strtok>
						if(f_count == 3){
 896:	ec 01       	movw	r28, r24
 898:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <f_count>
 89c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <f_count+0x1>
							//TX1_STR(ptr);
							TX1_STR("n2.val=");
 8a0:	03 97       	sbiw	r24, 0x03	; 3
 8a2:	81 f4       	brne	.+32     	; 0x8c4 <__vector_18+0x2b4>
 8a4:	82 e2       	ldi	r24, 0x22	; 34
 8a6:	91 e0       	ldi	r25, 0x01	; 1
							TX1_STR(ptr);
 8a8:	a7 de       	rcall	.-690    	; 0x5f8 <TX1_STR>
 8aa:	ce 01       	movw	r24, r28
 8ac:	a5 de       	rcall	.-694    	; 0x5f8 <TX1_STR>
							for(int index = 0 ; index < 3; index++){
 8ae:	00 e0       	ldi	r16, 0x00	; 0
 8b0:	10 e0       	ldi	r17, 0x00	; 0
 8b2:	05 c0       	rjmp	.+10     	; 0x8be <__vector_18+0x2ae>
								UART1_tX(0xFF);
 8b4:	8f ef       	ldi	r24, 0xFF	; 255
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	91 de       	rcall	.-734    	; 0x5dc <UART1_tX>
 8ba:	0f 5f       	subi	r16, 0xFF	; 255
						ptr = strtok(NULL,"\"");
						if(f_count == 3){
							//TX1_STR(ptr);
							TX1_STR("n2.val=");
							TX1_STR(ptr);
							for(int index = 0 ; index < 3; index++){
 8bc:	1f 4f       	sbci	r17, 0xFF	; 255
 8be:	03 30       	cpi	r16, 0x03	; 3
 8c0:	11 05       	cpc	r17, r1
 8c2:	c4 f3       	brlt	.-16     	; 0x8b4 <__vector_18+0x2a4>
 8c4:	cd 2b       	or	r28, r29
					//TX1_STR(hum_buf);
					//_delay_ms(100);
					
					f_count = 0;
					ptr = strtok(pm_buf,"\"");
					while(ptr != NULL){
 8c6:	c9 f6       	brne	.-78     	; 0x87a <__vector_18+0x26a>
 8c8:	2f ef       	ldi	r18, 0xFF	; 255
 8ca:	81 ee       	ldi	r24, 0xE1	; 225
 8cc:	94 e0       	ldi	r25, 0x04	; 4
 8ce:	21 50       	subi	r18, 0x01	; 1
 8d0:	80 40       	sbci	r24, 0x00	; 0
 8d2:	90 40       	sbci	r25, 0x00	; 0
 8d4:	e1 f7       	brne	.-8      	; 0x8ce <__vector_18+0x2be>
 8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <__vector_18+0x2c8>
 8d8:	00 00       	nop
 8da:	ff 91       	pop	r31
					_delay_ms(100);
					//TX1_STR(pm_buf);
				}	
			}
				
			}
 8dc:	ef 91       	pop	r30
 8de:	df 91       	pop	r29
 8e0:	cf 91       	pop	r28
 8e2:	bf 91       	pop	r27
 8e4:	af 91       	pop	r26
 8e6:	9f 91       	pop	r25
 8e8:	8f 91       	pop	r24
 8ea:	7f 91       	pop	r23
 8ec:	6f 91       	pop	r22
 8ee:	5f 91       	pop	r21
 8f0:	4f 91       	pop	r20
 8f2:	3f 91       	pop	r19
 8f4:	2f 91       	pop	r18
 8f6:	1f 91       	pop	r17
 8f8:	0f 91       	pop	r16
 8fa:	0f 90       	pop	r0
 8fc:	0b be       	out	0x3b, r0	; 59
 8fe:	0f 90       	pop	r0
 900:	0f be       	out	0x3f, r0	; 63
 902:	0f 90       	pop	r0
 904:	1f 90       	pop	r1
 906:	18 95       	reti

00000908 <main>:
 908:	8f ef       	ldi	r24, 0xFF	; 255

int main(void)
{
    /* Replace with your application code */
	//check status
	DDRA = 0xFF;
 90a:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF;
 90c:	8b bb       	out	0x1b, r24	; 27
	//for uart0 setting
	DDRE = 0xFE;
 90e:	9e ef       	ldi	r25, 0xFE	; 254
 910:	92 b9       	out	0x02, r25	; 2
	UCSR0A = 0x00;
 912:	1b b8       	out	0x0b, r1	; 11
	UCSR0B |= (1<<TXEN0)|(1<<RXEN0);//recvie send enable
 914:	9a b1       	in	r25, 0x0a	; 10
 916:	98 61       	ori	r25, 0x18	; 24
 918:	9a b9       	out	0x0a, r25	; 10
	UBRR0H = 0x00;
 91a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 103;// 9600 BAUD 
 91e:	27 e6       	ldi	r18, 0x67	; 103
 920:	29 b9       	out	0x09, r18	; 9
	UCSR0B = 0x98;
 922:	98 e9       	ldi	r25, 0x98	; 152
 924:	9a b9       	out	0x0a, r25	; 10
	
	//for uart1 setting
	DDRD = 0x06;
 926:	96 e0       	ldi	r25, 0x06	; 6
 928:	91 bb       	out	0x11, r25	; 17
	UCSR1A = 0x00;
 92a:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1B |= (1<<TXEN0)|(1<<RXEN0);//recvie send enable
 92e:	ea e9       	ldi	r30, 0x9A	; 154
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	90 81       	ld	r25, Z
 934:	98 61       	ori	r25, 0x18	; 24
 936:	90 83       	st	Z, r25
	UBRR1H = 0x00;
 938:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 103;// 9600 BAUD
 93c:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	
	sei();
 940:	78 94       	sei
	char data[80];//send command
	
	//connection
	PORTA = 0xFF;
 942:	8b bb       	out	0x1b, r24	; 27
	wait_flag = 1;
 944:	81 e0       	ldi	r24, 0x01	; 1
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <wait_flag+0x1>
 94c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <wait_flag>
	TXDATA(str[1]);//reset 
 950:	80 ef       	ldi	r24, 0xF0	; 240
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	21 de       	rcall	.-958    	; 0x598 <TXDATA>
	while(wait_flag==1);
 956:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <wait_flag>
 95a:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <wait_flag+0x1>
 95e:	01 97       	sbiw	r24, 0x01	; 1
 960:	d1 f3       	breq	.-12     	; 0x956 <main+0x4e>
 962:	2f ef       	ldi	r18, 0xFF	; 255
 964:	89 e6       	ldi	r24, 0x69	; 105
 966:	98 e1       	ldi	r25, 0x18	; 24
 968:	21 50       	subi	r18, 0x01	; 1
 96a:	80 40       	sbci	r24, 0x00	; 0
 96c:	90 40       	sbci	r25, 0x00	; 0
 96e:	e1 f7       	brne	.-8      	; 0x968 <main+0x60>
 970:	00 c0       	rjmp	.+0      	; 0x972 <main+0x6a>
 972:	00 00       	nop
	_delay_ms(500);
		
	PORTA = 0xFF;
 974:	8f ef       	ldi	r24, 0xFF	; 255
 976:	8b bb       	out	0x1b, r24	; 27
	wait_flag = 1;
 978:	81 e0       	ldi	r24, 0x01	; 1
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <wait_flag+0x1>
 980:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <wait_flag>
	TXDATA(str[0]);//check AT
 984:	8c e8       	ldi	r24, 0x8C	; 140
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	07 de       	rcall	.-1010   	; 0x598 <TXDATA>
	while(wait_flag==1);
 98a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <wait_flag>
 98e:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <wait_flag+0x1>
 992:	01 97       	sbiw	r24, 0x01	; 1
 994:	d1 f3       	breq	.-12     	; 0x98a <main+0x82>
 996:	2f ef       	ldi	r18, 0xFF	; 255
 998:	81 ee       	ldi	r24, 0xE1	; 225
 99a:	94 e0       	ldi	r25, 0x04	; 4
 99c:	21 50       	subi	r18, 0x01	; 1
 99e:	80 40       	sbci	r24, 0x00	; 0
 9a0:	90 40       	sbci	r25, 0x00	; 0
 9a2:	e1 f7       	brne	.-8      	; 0x99c <main+0x94>
 9a4:	00 c0       	rjmp	.+0      	; 0x9a6 <main+0x9e>
 9a6:	00 00       	nop
	_delay_ms(100);
	
	PORTA = 0xFF;
 9a8:	8f ef       	ldi	r24, 0xFF	; 255
 9aa:	8b bb       	out	0x1b, r24	; 27
	wait_flag = 1;
 9ac:	81 e0       	ldi	r24, 0x01	; 1
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <wait_flag+0x1>
 9b4:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <wait_flag>
	TXDATA(str[3]);//mode = 1
 9b8:	88 eb       	ldi	r24, 0xB8	; 184
 9ba:	91 e0       	ldi	r25, 0x01	; 1
 9bc:	ed dd       	rcall	.-1062   	; 0x598 <TXDATA>
	while(wait_flag==1);
 9be:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <wait_flag>
 9c2:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <wait_flag+0x1>
 9c6:	01 97       	sbiw	r24, 0x01	; 1
 9c8:	d1 f3       	breq	.-12     	; 0x9be <main+0xb6>
 9ca:	2f ef       	ldi	r18, 0xFF	; 255
 9cc:	81 ee       	ldi	r24, 0xE1	; 225
 9ce:	94 e0       	ldi	r25, 0x04	; 4
 9d0:	21 50       	subi	r18, 0x01	; 1
 9d2:	80 40       	sbci	r24, 0x00	; 0
 9d4:	90 40       	sbci	r25, 0x00	; 0
 9d6:	e1 f7       	brne	.-8      	; 0x9d0 <main+0xc8>
 9d8:	00 c0       	rjmp	.+0      	; 0x9da <main+0xd2>
 9da:	00 00       	nop
	_delay_ms(100);
	
	PORTA = 0xF0;
 9dc:	80 ef       	ldi	r24, 0xF0	; 240
 9de:	8b bb       	out	0x1b, r24	; 27
	wait_flag = 1;
 9e0:	81 e0       	ldi	r24, 0x01	; 1
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <wait_flag+0x1>
 9e8:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <wait_flag>
	TXDATA(str[7]);//wifi connect
 9ec:	88 e4       	ldi	r24, 0x48	; 72
 9ee:	93 e0       	ldi	r25, 0x03	; 3
 9f0:	d3 dd       	rcall	.-1114   	; 0x598 <TXDATA>
	while(wait_flag==1);
 9f2:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <wait_flag>
 9f6:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <wait_flag+0x1>
 9fa:	01 97       	sbiw	r24, 0x01	; 1
 9fc:	d1 f3       	breq	.-12     	; 0x9f2 <main+0xea>
 9fe:	2f ef       	ldi	r18, 0xFF	; 255
 a00:	81 ee       	ldi	r24, 0xE1	; 225
 a02:	94 e0       	ldi	r25, 0x04	; 4
 a04:	21 50       	subi	r18, 0x01	; 1
 a06:	80 40       	sbci	r24, 0x00	; 0
 a08:	90 40       	sbci	r25, 0x00	; 0
 a0a:	e1 f7       	brne	.-8      	; 0xa04 <main+0xfc>
 a0c:	00 c0       	rjmp	.+0      	; 0xa0e <main+0x106>
 a0e:	00 00       	nop
	_delay_ms(100);
	
	PORTA = 0xFF;
 a10:	8f ef       	ldi	r24, 0xFF	; 255
 a12:	8b bb       	out	0x1b, r24	; 27
	wait_flag = 1;
 a14:	81 e0       	ldi	r24, 0x01	; 1
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <wait_flag+0x1>
 a1c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <wait_flag>
	TXDATA(str[4]);//singel = 1
 a20:	8c e1       	ldi	r24, 0x1C	; 28
 a22:	92 e0       	ldi	r25, 0x02	; 2
 a24:	b9 dd       	rcall	.-1166   	; 0x598 <TXDATA>
	while(wait_flag==1);
 a26:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <wait_flag>
 a2a:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <wait_flag+0x1>
 a2e:	01 97       	sbiw	r24, 0x01	; 1
 a30:	d1 f3       	breq	.-12     	; 0xa26 <main+0x11e>
 a32:	2f ef       	ldi	r18, 0xFF	; 255
 a34:	81 ee       	ldi	r24, 0xE1	; 225
 a36:	94 e0       	ldi	r25, 0x04	; 4
 a38:	21 50       	subi	r18, 0x01	; 1
 a3a:	80 40       	sbci	r24, 0x00	; 0
 a3c:	90 40       	sbci	r25, 0x00	; 0
 a3e:	e1 f7       	brne	.-8      	; 0xa38 <main+0x130>
 a40:	00 c0       	rjmp	.+0      	; 0xa42 <main+0x13a>
 a42:	00 00       	nop
	_delay_ms(100);
	
    while (1) 
    {
		//connect to website - 9
		PORTA = 0xFF;
 a44:	8f ef       	ldi	r24, 0xFF	; 255
 a46:	8b bb       	out	0x1b, r24	; 27
		wait_flag = 1;
 a48:	81 e0       	ldi	r24, 0x01	; 1
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <wait_flag+0x1>
 a50:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <wait_flag>
		TXDATA(str[9]);//singel = 1
 a54:	80 e1       	ldi	r24, 0x10	; 16
 a56:	94 e0       	ldi	r25, 0x04	; 4
 a58:	9f dd       	rcall	.-1218   	; 0x598 <TXDATA>
		while(wait_flag==1);
 a5a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <wait_flag>
 a5e:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <wait_flag+0x1>
 a62:	01 97       	sbiw	r24, 0x01	; 1
 a64:	d1 f3       	breq	.-12     	; 0xa5a <main+0x152>
		dot_count=0;
 a66:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <dot_count+0x1>
 a6a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <dot_count>
 a6e:	2f ef       	ldi	r18, 0xFF	; 255
 a70:	81 ee       	ldi	r24, 0xE1	; 225
 a72:	94 e0       	ldi	r25, 0x04	; 4
 a74:	21 50       	subi	r18, 0x01	; 1
 a76:	80 40       	sbci	r24, 0x00	; 0
 a78:	90 40       	sbci	r25, 0x00	; 0
 a7a:	e1 f7       	brne	.-8      	; 0xa74 <main+0x16c>
 a7c:	00 c0       	rjmp	.+0      	; 0xa7e <main+0x176>
 a7e:	00 00       	nop
		_delay_ms(100);
		
		//send lenth
		PORTA = 0xFF;
 a80:	8f ef       	ldi	r24, 0xFF	; 255
 a82:	8b bb       	out	0x1b, r24	; 27
		wait_flag = 1;
 a84:	81 e0       	ldi	r24, 0x01	; 1
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <wait_flag+0x1>
 a8c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <wait_flag>
		TXDATA(str[10]);//set byte = 1
 a90:	84 e7       	ldi	r24, 0x74	; 116
 a92:	94 e0       	ldi	r25, 0x04	; 4
 a94:	81 dd       	rcall	.-1278   	; 0x598 <TXDATA>
		while(wait_flag==1);
 a96:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <wait_flag>
 a9a:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <wait_flag+0x1>
 a9e:	01 97       	sbiw	r24, 0x01	; 1
 aa0:	d1 f3       	breq	.-12     	; 0xa96 <main+0x18e>
 aa2:	8f e9       	ldi	r24, 0x9F	; 159
 aa4:	9f e0       	ldi	r25, 0x0F	; 15
 aa6:	01 97       	sbiw	r24, 0x01	; 1
 aa8:	f1 f7       	brne	.-4      	; 0xaa6 <main+0x19e>
 aaa:	00 c0       	rjmp	.+0      	; 0xaac <main+0x1a4>
 aac:	00 00       	nop
		_delay_ms(1);
		//connect to path
		PORTA = 0xFF;
 aae:	8f ef       	ldi	r24, 0xFF	; 255
 ab0:	8b bb       	out	0x1b, r24	; 27
		wait_flag = 1;
 ab2:	81 e0       	ldi	r24, 0x01	; 1
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <wait_flag+0x1>
 aba:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <wait_flag>
		TXDATA(str[11]);//set byte = 1
 abe:	88 ed       	ldi	r24, 0xD8	; 216
 ac0:	94 e0       	ldi	r25, 0x04	; 4
 ac2:	6a dd       	rcall	.-1324   	; 0x598 <TXDATA>
		while(wait_flag==1);
 ac4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <wait_flag>
 ac8:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <wait_flag+0x1>
 acc:	01 97       	sbiw	r24, 0x01	; 1
 ace:	d1 f3       	breq	.-12     	; 0xac4 <main+0x1bc>
 ad0:	9f ef       	ldi	r25, 0xFF	; 255
 ad2:	21 ee       	ldi	r18, 0xE1	; 225
 ad4:	84 e0       	ldi	r24, 0x04	; 4
 ad6:	91 50       	subi	r25, 0x01	; 1
 ad8:	20 40       	sbci	r18, 0x00	; 0
 ada:	80 40       	sbci	r24, 0x00	; 0
 adc:	e1 f7       	brne	.-8      	; 0xad6 <main+0x1ce>
 ade:	00 c0       	rjmp	.+0      	; 0xae0 <main+0x1d8>
 ae0:	00 00       	nop
 ae2:	b0 cf       	rjmp	.-160    	; 0xa44 <main+0x13c>

00000ae4 <strcpy_P>:
 ae4:	fb 01       	movw	r30, r22
 ae6:	dc 01       	movw	r26, r24
 ae8:	05 90       	lpm	r0, Z+
 aea:	0d 92       	st	X+, r0
 aec:	00 20       	and	r0, r0
 aee:	e1 f7       	brne	.-8      	; 0xae8 <strcpy_P+0x4>
 af0:	08 95       	ret

00000af2 <strtok>:
 af2:	4a e2       	ldi	r20, 0x2A	; 42
 af4:	51 e0       	ldi	r21, 0x01	; 1
 af6:	09 c0       	rjmp	.+18     	; 0xb0a <strtok_r>

00000af8 <strcmp>:
 af8:	fb 01       	movw	r30, r22
 afa:	dc 01       	movw	r26, r24
 afc:	8d 91       	ld	r24, X+
 afe:	01 90       	ld	r0, Z+
 b00:	80 19       	sub	r24, r0
 b02:	01 10       	cpse	r0, r1
 b04:	d9 f3       	breq	.-10     	; 0xafc <strcmp+0x4>
 b06:	99 0b       	sbc	r25, r25
 b08:	08 95       	ret

00000b0a <strtok_r>:
 b0a:	fa 01       	movw	r30, r20
 b0c:	a1 91       	ld	r26, Z+
 b0e:	b0 81       	ld	r27, Z
 b10:	00 97       	sbiw	r24, 0x00	; 0
 b12:	19 f4       	brne	.+6      	; 0xb1a <strtok_r+0x10>
 b14:	10 97       	sbiw	r26, 0x00	; 0
 b16:	e1 f0       	breq	.+56     	; 0xb50 <strtok_r+0x46>
 b18:	cd 01       	movw	r24, r26
 b1a:	dc 01       	movw	r26, r24
 b1c:	cd 01       	movw	r24, r26
 b1e:	0d 90       	ld	r0, X+
 b20:	00 20       	and	r0, r0
 b22:	11 f4       	brne	.+4      	; 0xb28 <strtok_r+0x1e>
 b24:	c0 01       	movw	r24, r0
 b26:	13 c0       	rjmp	.+38     	; 0xb4e <strtok_r+0x44>
 b28:	fb 01       	movw	r30, r22
 b2a:	21 91       	ld	r18, Z+
 b2c:	22 23       	and	r18, r18
 b2e:	19 f0       	breq	.+6      	; 0xb36 <strtok_r+0x2c>
 b30:	20 15       	cp	r18, r0
 b32:	d9 f7       	brne	.-10     	; 0xb2a <strtok_r+0x20>
 b34:	f3 cf       	rjmp	.-26     	; 0xb1c <strtok_r+0x12>
 b36:	fb 01       	movw	r30, r22
 b38:	21 91       	ld	r18, Z+
 b3a:	20 15       	cp	r18, r0
 b3c:	19 f4       	brne	.+6      	; 0xb44 <strtok_r+0x3a>
 b3e:	1e 92       	st	-X, r1
 b40:	11 96       	adiw	r26, 0x01	; 1
 b42:	06 c0       	rjmp	.+12     	; 0xb50 <strtok_r+0x46>
 b44:	22 23       	and	r18, r18
 b46:	c1 f7       	brne	.-16     	; 0xb38 <strtok_r+0x2e>
 b48:	0d 90       	ld	r0, X+
 b4a:	00 20       	and	r0, r0
 b4c:	a1 f7       	brne	.-24     	; 0xb36 <strtok_r+0x2c>
 b4e:	d0 01       	movw	r26, r0
 b50:	fa 01       	movw	r30, r20
 b52:	a1 93       	st	Z+, r26
 b54:	b0 83       	st	Z, r27
 b56:	08 95       	ret

00000b58 <_exit>:
 b58:	f8 94       	cli

00000b5a <__stop_program>:
 b5a:	ff cf       	rjmp	.-2      	; 0xb5a <__stop_program>
